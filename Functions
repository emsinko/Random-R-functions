data %>% group_by(TRANSPMODE) %>% summarize(mean(SALARY), n = n())


SST <- 
data %>% 
  group_by(TRANSPMODE) %>% 
  summarize(mean_i = mean(SALARY), n_i = n()) %>% 
  mutate(total_mean = mean(data$SALARY), SST_i = n_i * (mean_i - total_mean)^2,SST = sum(SST_i) ) %>% 
  summarise(SST = sum(SST_i)) %>%
  as.numeric()



SSE_i <- 
data.frame(TRANSPMODE = data$TRANSPMODE,
           SALARY = data$SALARY,
           mean_i = ifelse(data$TRANSPMODE == 1, mean(data[data$TRANSPMODE == 1, "SALARY"]), 
                    ifelse(data$TRANSPMODE == 2, mean(data[data$TRANSPMODE == 2, "SALARY"]),
                    ifelse(data$TRANSPMODE == 3, mean(data[data$TRANSPMODE == 3, "SALARY"]),
                    ifelse(data$TRANSPMODE == 4, mean(data[data$TRANSPMODE == 4, "SALARY"]),
                    ifelse(data$TRANSPMODE == 5, mean(data[data$TRANSPMODE == 5, "SALARY"]),
                      "error"))))))
           
SSE <- sum((SSE_i$SALARY - as.numeric(SSE_i$mean_i))^2)  # tu treba este to as.numeric opravit lebo dava cisla 1,2,3,4.. a bude dobre 

SSTO <- SSE + SST


p = 5
n = length(data$SALARY)

MST = SST / (p - 1)
MSE = SSE / (n - p)

F_statistic = MST / MSE

2 * (1 - pf(F_statistic, df1 = p-1 , df2 = n-p)) # pvalue 

anova_one_way <- aov(SALARY~factor(TRANSPMODE), data = data)
summary(anova_one_way)

F_statistic

# ====================================
# Usefull
# ====================================

write.excel <- function(x,row.names=FALSE,col.names=TRUE,...) {
  write.table(x,"clipboard",sep="\t", dec = "," , row.names=row.names,col.names=col.names,...)
}

usePackage <- function(p) {
  if (!is.element(p, installed.packages()[,1]))
    install.packages(p, dep = TRUE)
  require(p, character.only = TRUE)
}


usePackage("ggThemeAssist")
gg <- ggplot(mtcars, aes(x = hp, y = mpg, colour = as.factor(cyl))) + geom_point() + theme_bw()
ggThemeAssistGadget(gg)


'%notin%' <- Negate('%in%')

sec_to_hms = function(sec) {
  h = sec %/% 3600
  m = sec %% 3600 %/% 60
  s = floor(sec %% 3600 %% 60)
  
  return(sprintf("%02.f:%02.f:%02.f",h,m,s))
}


# ====================================
# Connect to sql server + pull data 
# ====================================

usePackage("odbc")

con <- dbConnect(odbc::odbc(), Driver = "SQL Server", Server = "server_name", Database = "db_name", Trusted_Connection = "True")

# SQL query 
sqlStr <- paste("
  select *
  from table
  " 
                )
writeLines(sqlStr) # toto je len pohlad na skript
data <- dbGetQuery(con, sqlStr)  # spustenie SQL skriptu



# ====================================
# Anomaly detection 
# ====================================

is_between <- function(x, left, right) return( (x >= left) & (x <= right))

is_outlier <- function(x){
  interval <- quantile(x,c(0.25,0.75)) + c(-1,1) * 1.5 * IQR(x)
  return(!is_between(x,min(interval), max(interval)))
}

show_outlier <- function(x) x[is_outlier(x)]

outlier_count <- function(x, uniqueCount = FALSE){
  if(uniqueCount){
    return(length((unique(x[is_outlier(x)]))))
  } else return(sum(is_outlier(x)))
} 

===================================================================

# ====================================
# Probability & statistics 
# ====================================

expected_value <- function(x,p){
  sum(x*p)
}

variance <- function(x,p){
  expected_value(x^2,p) - expected_value(x,p)^2
}

variance_v2 <- function(x,p){
  expected_value( (x-expected_value(x,p))^2, p )
}

standard_deviation <- function(x,p){
  sqrt(variance(x,p))
}

two_same <- function(a,b,c){
  if( (a == b & a == c) | (a!=b & a!=c & b!=c)) return(0) 
  else return(1)
}

ramon_report <- function(x,freq){ 
  
  library(glue) 
  
  data <- rep(x,freq)
  n <- length(data)
  var_data <- (n-1)/n*var(data)
  sd_data <- sqrt(var_data)
  
  #print(sum(data^2)/n - mean(data)^2)
  
  print(glue("n: {round(length(data),2)}"))
  print(glue("Mean: {round(mean(data),2)}"))
  print(glue("Variance: {round(var_data,2)}"))
  print(glue("Standard deviation: {round(sd_data,2)}"))
  
}


===================================================================


bisection_method <- function(f,a,b){
  if( f(a)*f(b) < 0){
    while(abs(a-b) > 0.00001){
      c <- (a+b)/2
      if(f(c) == 0) return(c)
      if(f(a)*f(c) < 0){
        b <- c
      }
      else{
        a <- c 
      }
    }
    return((a+b)/2)
  } 
  else{
    return("Koren je mimo intervalu (a,b)")
  }
}


# Vypocet integralu pomocou trapezium metody
integral_trapez <- function(a,b,n,f){
  
  #######################################################################################
  # <a,b> je interval na ktorom integrujeme                                             #
  #  n    je pocet lichobeznikov, ktorych obsah spocitavame                             #
  #  f    funkcia, ktoru integrujeme. Piseme napr. v tvare f = function(x) x^2 - sin(x) #
  #######################################################################################
  
  delta_x <- (b-a)/n
  x <- seq(from = a, to = b, by = delta_x)
  if(length(f(x)) == 1) return(delta_x / 2  * (2*f(x)*(n+1) - f(a) - f(b)))  #
  else return(delta_x / 2  * (2*sum(f(x)) - f(a) - f(b)))
}
integral_trapez(3, 4, 100, f = function(x) 2)
  




splatka <- function(P = 55000,r = 1.2,n = 20){

  #########################################################################################
  #  Vypocet mesacnej splatky pri fixnej urokovej sadzbe r, istiny P a doby splacania n   #
  #  P    Istina                                                                          #
  #  r    Urokova sadzba p.a.                                                             #
  #  n    Pocet rokov splacania                                                           #
  #########################################################################################
  
  r <- r/100/12
  n <- 12*n
  if(r == 0)  
    A <- P/n
  else
    A <- P*( (r*(1+r)^n)/((1+r)^n-1))  
  
  return(A)
  
  return(A)
}


mocnina <- function(mat,power){
  A <- mat
  if(power == 0) return(diag(dim(A)[1]))
  else if(power == 1) return(mat) else
    for(i in 1:(power-1)){ 
      A <- A%*%mat
    }
  return(A)
}
